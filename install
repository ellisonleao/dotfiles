#!/bin/bash

declare -r GITHUB_REPOSITORY='ellisonleao/dotfiles'
declare -r DOTFILES_ORIGIN="https://github.com/$GITHUB_REPOSITORY.git"
declare dotfilesDirectory=$HOME
declare dotfilesRepoDirectory="$dotfilesDirectory/.dotfiles"

# ----------------------------------------------------------------------
# | Helper Functions                                                   |
# ----------------------------------------------------------------------

is_supported_version() {

    declare -a v1=(${1//./ })
    declare -a v2=(${2//./ })
    local i=""

    # Fill empty positions in v1 with zeros
    for (( i=${#v1[@]}; i<${#v2[@]}; i++ )); do
        v1[i]=0
    done

    for (( i=0; i<${#v1[@]}; i++ )); do

        # Fill empty positions in v2 with zeros
        if [[ -z ${v2[i]} ]]; then
            v2[i]=0
        fi

        if (( 10#${v1[i]} < 10#${v2[i]} )); then
            return 1
        fi

    done

}

answer_is_yes() {
    [[ "$REPLY" =~ ^[Yy]$ ]] \
        && return 0 \
        || return 1
}

ask() {
    print_question "$1"
    read
}

ask_for_confirmation() {
    print_question "$1 (y/n) "
    read -n 1
    printf "\n"
}

ask_for_sudo() {

    # Ask for the administrator password upfront
    sudo -v &> /dev/null

    # Update existing `sudo` time stamp until this script has finished
    # https://gist.github.com/cowboy/3118588
    while true; do
        sudo -n true
        sleep 60
        kill -0 "$$" || exit
    done &> /dev/null &

}

cmd_exists() {
    command -v "$1" &> /dev/null
    return $?
}

execute() {
    eval "$1" &> /dev/null
    print_result $? "${2:-$1}"
}

link_profile() {
    ln -s "$dotfilesRepoDirectory/nvim/init.vim" ~/.config/nvim/
    ln -s "$dotfilesRepoDirectory/bash/bashrc" $HOME/.bashrc
    ln -s "$dotfilesRepoDirectory/git/gitconfig" $HOME/.gitconfig
    ln -s "$dotfilesRepoDirectory/osx/osx" $HOME/.osx
    cat "$dotfilesRepoDirectory/shellfun/*.sh" > $HOME/.bash_aliases
    echo "source ~/.bashrc" > $HOME/.bash_profile
    print_result $? 'Copying profile files'
}

get_answer() {
    printf "$REPLY"
}

print_error() {
    print_in_red "  [✖] $1 $2\n"
}

print_in_green() {
    printf "\e[0;32m$1\e[0m"
}

print_in_purple() {
    printf "\e[0;35m$1\e[0m"
}

print_in_red() {
    printf "\e[0;31m$1\e[0m"
}

print_in_yellow() {
    printf "\e[0;33m$1\e[0m"
}

print_info() {
    print_in_purple "\n $1\n\n"
}

print_question() {
    print_in_yellow "  [?] $1"
}

print_result() {
    [ $1 -eq 0 ] \
        && print_success "$2" \
        || print_error "$2"

    return $1
}

print_success() {
    print_in_green "  [✔] $1\n"
}

brew_install() {
    declare -r FORMULA="$1"
    declare -r PARAMS="$2"

    execute "brew install $FORMULA $PARAMS"
}

brew_tap() {

    declare -r REPOSITORY="$1"

    brew tap "$REPOSITORY" &> /dev/null
    print_result $? "brew tap $REPOSITORY\n"

    return $?

}

brew_cask() {
    declare -r CASKNAME="$1"
    brew cask install "$1"
    print_result $? "brew cask install $CASKNAME\n"
}

clone_dotfiles() {

    ask_for_confirmation "Do you want to store the dotfiles in '$dotfilesDirectory'?"

    if ! answer_is_yes; then
        dotfilesDirectory=''
        while [ -z "$dotfilesDirectory" ]; do
            ask 'Please specify another location for the dotfiles (path): '
            dotfilesDirectory="$(get_answer)"
        done
    fi

    # Ensure the `dotfiles` directory is available

    while [ -e "$dotfilesDirectory" ]; do
        ask_for_confirmation "'$dotfilesDirectory' already exists, do you want to overwrite it?"
        if answer_is_yes; then
            rm -rf "$dotfilesDirectory"
            break
        else
            dotfilesDirectory=''
            while [ -z "$dotfilesDirectory" ]; do
                ask 'Please specify another location for the dotfiles (path): '
                dotfilesDirectory="$(get_answer)"
            done
        fi
    done

    printf '\n'

    mkdir -p "$dotfilesDirectory"
    print_result $? "Create '$dotfilesDirectory'" 'true'

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Cloning dotfiles on directory

    git clone --recursive "$DOTFILES_ORIGIN" "$dotfilesRepoDirectory"
    print_result $? 'Clone dotfiles' 'true'
    printf '\n'

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    cd "$dotfilesRepoDirectory"

    print_info "Installing powerline fonts"
    bash fonts/install.sh
}

verify_os() {

    declare -r MINIMUM_OS_X_VERSION='10.10'
    declare -r OS_NAME="$(uname -s)"

    declare OS_VERSION=''

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check if the OS is `OS X` and
    # it's above the required version

    if [ "$OS_NAME" == "Darwin" ]; then

        OS_VERSION="$(sw_vers -productVersion)"

        is_supported_version "$OS_VERSION" "$MINIMUM_OS_X_VERSION" \
            && return 0 \
            || printf "Sorry, this script is intended only for OS X $MINIMUM_OS_X_VERSION+"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    else
        printf 'Sorry, this script is intended only for OS X and Ubuntu!'
    fi

    return 1

}

configure_pyenv() {
    source ~/.bashrc
    pyenv install 3.6.0
    pyenv install 2.7.13

    # creating different global environments for 2 and 3 versions
    pyenv virtualenv 3.6.0 3
    pyenv virtualenv 2.7.13 2

    pyenv activate 3
    pip install howdoi you-get httpie
    pyenv deactivate

    # set execution order
    pyenv global 3.6.0 2.7.13 3 2
}

# ----------------------------------------------------------------------
# | Main                                                               |
# ----------------------------------------------------------------------

main() {

    # Ensure the OS is supported and
    # it's above the required version

    verify_os || exit 1

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Ensure that the following actions
    # are made relative to this file's path
    #
    # http://mywiki.wooledge.org/BashFAQ/028

    cd "$(dirname "$BASH_SOURCE")"

    ask_for_sudo

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Setup the `dotfiles` and install fonts

    if cmd_exists 'git'; then
        print_info 'Cloning dotfiles'
        clone_dotfiles
    else
        print_in_red "git is required in order to install dotfiles"
        exit 1
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    print_info 'Install applications'
    ask_for_confirmation 'Do you want to install the applications/command line tools?'
    printf '\n'

    if answer_is_yes; then
        # XCode
        xcode-select --install &> /dev/null
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        # Wait until the XCode Command Line Tools are installed
        until xcode-select --print-path &> /dev/null; do
            sleep 5
        done

        print_result $? 'Install XCode Command Line Tools'

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        # Point the `xcode-select` developer directory to
        # the appropriate directory from within `Xcode.app`
        # https://github.com/alrra/dotfiles/issues/13

        sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
        print_result $? 'Make "xcode-select" developer directory point to Xcode'

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        # Prompt user to agree to the terms of the Xcode license
        sudo xcodebuild -license
        print_result $? 'Agree with the XCode Command Line Tools licence'
        printf '\n'
        print_result $? 'XCode Command Line Tools'

        # HOMEBREW
        if ! cmd_exists 'brew'; then
            printf "\n" | /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" &> /dev/null
        fi
        print_result $? 'Install Homebrew'

        # Formulas
        FORMULAS=(
            "imagemagick"
            "nginx"
            "wget"
            "ack"
            "git"
            "hub"
            "httpie"
            "ffmpeg"
            "postgresql"
            "mongodb"
            "node"
            "go"
            "ssh-copy-id"
            "speedtest_cli"
            "ansiweather"
            "pyenv"
            "pyenv-virtualenv"
            "pyenv-virtualenvwrapper"
            "nvim"
        )

        brew_tap "homebrew/services"

        # Casks
        CASKS=(
            "google-chrome"
            "google-drive"
            "iterm2"
            "vlc"
            "utorrent"
            "spotify"
            "slack"
            "remote-play"
            "firefox"
            "skype"
            "telegram"
            "whatsapp"
            "java"
        )

        for i in ${FORMULAS[@]}; do
            brew_install ${i}
        done

        for i in ${CASKS[@]}; do
            brew_cask ${i}
        done

    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


    print_info 'Copying Profile'
    copy_profile

    if cmd_exists 'nvim'; then

        print_info 'Installing/Update NeoVim plugins'

        # Installing Plug
        bash -c "$(curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim)"
        # Installing plugins
        printf "\n" | nvim +PlugInstall 2> /dev/null

    fi

    print_info "Configuring pyenv"
    configure_pyenv
    print_success "pyenv installed"
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    print_info 'Restart'

    ask_for_confirmation 'Do you want to restart?'
    printf '\n'

    if answer_is_yes; then
        sudo shutdown -r now &> /dev/null
    fi

    print_in_green "Success! Please restart the terminal to see the changes!"
}

main
