#!/bin/bash

declare -r GITHUB_REPOSITORY='ellisonleao/dotfiles'
declare -r DOTFILES_ORIGIN="https://github.com/$GITHUB_REPOSITORY.git"
declare dotfilesDirectory=$HOME
declare dotfilesRepoDirectory="$dotfilesDirectory/.dotfiles"

# ----------------------------------------------------------------------
# | Helper Functions                                                   |
# ----------------------------------------------------------------------

is_supported_version() {

    declare -a v1=(${1//./ })
    declare -a v2=(${2//./ })
    local i=""

    # Fill empty positions in v1 with zeros
    for (( i=${#v1[@]}; i<${#v2[@]}; i++ )); do
        v1[i]=0
    done

    for (( i=0; i<${#v1[@]}; i++ )); do

        # Fill empty positions in v2 with zeros
        if [[ -z ${v2[i]} ]]; then
            v2[i]=0
        fi

        if (( 10#${v1[i]} < 10#${v2[i]} )); then
            return 1
        fi

    done

}

answer_is_yes() {
    [[ "$REPLY" =~ ^[Yy]$ ]] \
        && return 0 \
        || return 1
}

ask() {
    print_question "$1"
    read
}

ask_for_confirmation() {
    print_question "$1 (y/n) "
    read -n 1
    printf "\n"
}

ask_for_sudo() {

    # Ask for the administrator password upfront
    sudo -v &> /dev/null

    # Update existing `sudo` time stamp until this script has finished
    # https://gist.github.com/cowboy/3118588
    while true; do
        sudo -n true
        sleep 60
        kill -0 "$$" || exit
    done &> /dev/null &

}

cmd_exists() {
    command -v "$1" &> /dev/null
    return $?
}

execute() {
    eval "$1" &> /dev/null
    print_result $? "${2:-$1}"
}

link_profile() {
    if [ ! -d "~/.config/nvim" ]; then mkdir ~/.config/nvim/; fi
    ln -s "$dotfilesRepoDirectory/nvim/init.vim" ~/.config/nvim/
    ln -s "$dotfilesRepoDirectory/bash/bashrc" $HOME/.bashrc
    ln -s "$dotfilesRepoDirectory/bash/bash_aliases" $HOME/.bash_aliases
    ln -s "$dotfilesRepoDirectory/git/gitconfig" $HOME/.gitconfig
    ln -s "$dotfilesRepoDirectory/osx/osx" $HOME/.osx
    echo "source ~/.bashrc" > $HOME/.bash_profile
    print_result $? 'Copying profile files'
}

configure_bash() {
    if [ ! -d "~/.config" ]; then mkdir ~/.config; fi
    git clone https://github.com/chriskempson/base16-shell.git ~/.config/base16-shell

    # Switch to using brew-installed bash as default shell
    if ! fgrep -q '/usr/local/bin/bash' /etc/shells; then
      echo '/usr/local/bin/bash' | sudo tee -a /etc/shells;
      chsh -s /usr/local/bin/bash;
    fi;
}

install_funcoeszz() {
    http://funcoeszz.net/download/funcoeszz-18.3.sh
    curl -fLo /usr/local/bin/funcoeszz http://funcoeszz.net/download/funcoeszz-18.3.sh
    chmod +x /usr/local/bin/funcoeszz
}

get_answer() {
    printf "$REPLY"
}

print_error() {
    print_in_red "  [✖] $1 $2\n"
}

print_in_green() {
    printf "\e[0;32m$1\e[0m"
}

print_in_purple() {
    printf "\e[0;35m$1\e[0m"
}

print_in_red() {
    printf "\e[0;31m$1\e[0m"
}

print_in_yellow() {
    printf "\e[0;33m$1\e[0m"
}

print_info() {
    print_in_purple "\n $1\n\n"
}

print_question() {
    print_in_yellow "  [?] $1"
}

print_result() {
    [ $1 -eq 0 ] \
        && print_success "$2" \
        || print_error "$2"

    return $1
}

print_success() {
    print_in_green "  [✔] $1\n"
}

brew_install() {
    declare -r FORMULA="$1"
    declare -r PARAMS="$2"

    execute "brew install $FORMULA $PARAMS"
}

brew_tap() {

    declare -r REPOSITORY="$1"

    brew tap "$REPOSITORY" &> /dev/null
    print_result $? "brew tap $REPOSITORY\n"

    return $?

}

brew_cask() {
    declare -r CASKNAME="$1"
    brew cask install "$1"
    print_result $? "brew cask install $CASKNAME\n"
}

clone_dotfiles() {
    print_info "Cloning dotfiles.."

    if [ -d "$dotfilesRepoDirectory" ]; then
       print_info "Dotfiles folder already exists.. skipping"
       return
    fi

	# Cloning dotfiles on directory
    print_info "Cloning dotfiles on $dotfilesRepoDirectory"
    git clone --recursive "$DOTFILES_ORIGIN" "$dotfilesRepoDirectory"
    print_result $? 'Clone dotfiles' 'true'
    printf '\n'

    cd "$dotfilesRepoDirectory"
    print_info "Installing powerline fonts"
    sh fonts/install.sh
}

verify_os() {

    declare -r MINIMUM_OS_X_VERSION='10.10'
    declare -r OS_NAME="$(uname -s)"

    declare OS_VERSION=''

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check if the OS is `OS X` and
    # it's above the required version

    if [ "$OS_NAME" == "Darwin" ]; then

        OS_VERSION="$(sw_vers -productVersion)"

        is_supported_version "$OS_VERSION" "$MINIMUM_OS_X_VERSION" \
            && return 0 \
            || printf "Sorry, this script is intended only for OS X $MINIMUM_OS_X_VERSION+"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    else
        printf 'Sorry, this script is intended only for OS X and Ubuntu!'
    fi

    return 1

}

configure_python() {
    print_info "Configuring python environment.."

    brew_install 'pyenv'
    brew_install 'pyenv-virtualenv'
    brew_install 'pyenv-virtualenvwrapper'

    eval "$(pyenv init -)"

    # installing python versions
    pyenv install 3.7.0
    pyenv install 2.7.15

    # creating global virtualenvs
    pyenv virtualenv 3.7.0 3
    pyenv virtualenv 2.7.15 2

    # installing python specific tools on global virtualenvs
    pyenv activate 3
    pip install neovim howdoi httpie ipython flake8 youtube-dl
    pyenv deactivate
    pyenv activate 2
    pip install flake8 neovim
    pyenv deactivate

    pyenv global 3.7.0 3 2.7.15 2
}

agree_with_xcode_licence() {

    # Automatically agree to the terms of the `Xcode` license.
    # https://github.com/alrra/dotfiles/issues/10

    sudo xcodebuild -license accept &> /dev/null
    print_result $? "Agree to the terms of the Xcode licence"

}

are_xcode_command_line_tools_installed() {
    xcode-select --print-path &> /dev/null
}

install_xcode() {

    # If necessary, prompt user to install `Xcode`.

    if ! is_xcode_installed; then
        open "macappstores://itunes.apple.com/en/app/xcode/id497799835"
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Wait until `Xcode` is installed.

    execute \
        "until is_xcode_installed; do \
            sleep 5; \
         done" \
        "Xcode.app"

}

install_xcode_command_line_tools() {

    # If necessary, prompt user to install
    # the `Xcode Command Line Tools`.

    xcode-select --install &> /dev/null

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Wait until the `Xcode Command Line Tools` are installed.

    execute \
        "until are_xcode_command_line_tools_installed; do \
            sleep 5; \
         done" \
        "Xcode Command Line Tools"

}

is_xcode_installed() {
    [ -d "/Applications/Xcode.app" ]
}

set_xcode_developer_directory() {

    # Point the `xcode-select` developer directory to
    # the appropriate directory from within `Xcode.app`.
    #
    # https://github.com/alrra/dotfiles/issues/13

    sudo xcode-select -switch "/Applications/Xcode.app/Contents/Developer" &> /dev/null
    print_result $? "Make 'xcode-select' developer directory point to the appropriate directory from within Xcode.app"

}

install_homebrew() {
    print_info 'Install Homebrew'
    if ! cmd_exists 'brew'; then
        printf "\n" | /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" &> /dev/null
    fi
    print_result $? 'Install Homebrew'
}

install_brew_formulas() {
    print_info "Installing Homebrew formulas"

    # Formulas
    FORMULAS=(
        coreutils
        moreutils
        findutils
        tree
        bash
        bash-completion2
        nginx
        wget
        ack
        git
        hub
        ffmpeg
        postgresql
        mongodb
        node
        go
        ssh-copy-id
        speedtest_cli
        ansiweather
        neovim
        fzf
        gpg
        python
        python3
        ripgrep
        httpie
        pass
        bat
        fd
    )

    for i in ${FORMULAS[@]}; do
        brew_install ${i}
    done

    # installing howebrew services
    brew_tap "homebrew/services"

    # installing homebrew special cases that need more flags
    brew_install gnu-sed --with-default-names
    brew_install imagemagick --with-webp
}

install_brew_casks() {
    print_info "Installing homebrew casks"
    brew_tap "caskroom/versions"

    CASKS=(
        google-chrome
        google-backup-and-sync
        firefox
        iterm2-nightly
        vlc-nightly
        qbittorrent
        spotify
        whatsapp
        java8
        obs
        openoffice
    )

    for i in ${CASKS[@]}; do
        brew_cask ${i}
    done

}

configure_neovim() {
    print_info "Installing/Update NeoVim plugins"

    # Installing Plug
    curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    # Installing plugins
    printf "\n" | nvim +PlugInstall 2> /dev/null

    print_result $? "Installing/Update NeoVim plugins"
}
# ----------------------------------------------------------------------
# | Main                                                               |
# ----------------------------------------------------------------------

main() {

    # Ensure the OS is supported and
    # it's above the required version

    verify_os || exit 1

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Ensure that the following actions
    # are made relative to this file's path
    #
    # http://mywiki.wooledge.org/BashFAQ/028

    cd "$(dirname "$BASH_SOURCE")"

    ask_for_sudo

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Install Xcode and developer tools
    if ! is_xcode_installed; then
        install_xcode_command_line_tools
        install_xcode
        set_xcode_developer_directory
        agree_with_xcode_licence
    fi;

    install_homebrew

    clone_dotfiles

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    print_info 'Installing applications'

    install_brew_formulas
    install_brew_casks

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # configuring neovim and plugins
    configure_neovim

    # creating environment for python
    configure_python

    # configuring bashrc with aliases and etc
    link_profile

    # change bash to use new version and colors
    configure_bash

    # install funcoeszz
    install_funcoeszz

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    print_in_green "Success! Please restart the terminal to see the changes!"
}

main
