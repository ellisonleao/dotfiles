#!/bin/bash

declare -r GITHUB_REPOSITORY='ellisonleao/dotfiles'
declare -r DOTFILES_ORIGIN="https://github.com/$GITHUB_REPOSITORY.git"
declare dotfilesDirectory=$HOME
declare dotfilesRepoDirectory="$dotfilesDirectory/.dotfiles"

# ----------------------------------------------------------------------
# | Helper Functions                                                   |
# ----------------------------------------------------------------------
print_error() {
    print_in_red "  [✖] $1 $2\n"
}

print_in_green() {
    printf "\e[0;32m$1\e[0m"
}

print_in_purple() {
    printf "\e[0;35m$1\e[0m"
}

print_in_red() {
    printf "\e[0;31m$1\e[0m"
}

print_info() {
    print_in_purple "\n $1\n\n"
}

print_result() {
    [ $1 -eq 0 ] \
        && print_success "$2" \
        || print_error "$2"

    return $1
}

print_success() {
    print_in_green "  [✔] $1\n"
}

ask_for_sudo() {

    # Ask for the administrator password upfront
    sudo -v &> /dev/null

    # Update existing `sudo` time stamp until this script has finished
    # https://gist.github.com/cowboy/3118588
    while true; do
        sudo -n true
        sleep 60
        kill -0 "$$" || exit
    done &> /dev/null &

}

cmd_exists() {
    command -v "$1" &> /dev/null
    return $?
}

execute() {
    eval "$1" &> /dev/null
    print_result $? "${2:-$1}"
}

verify_os() {
    declare -r OS_NAME="$(uname -s)"

    if [ ! "$OS_NAME" == "Linux" ]; then
        printf 'Sorry, this script is intended only for Ubuntu based distros!'
    fi

    return 1
}


show_spinner() {

    local -r FRAMES='/-\|'

    # shellcheck disable=SC2034
    local -r NUMBER_OR_FRAMES=${#FRAMES}

    local -r CMDS="$2"
    local -r MSG="$3"
    local -r PID="$1"

    local i=0
    local frameText=""

    # Display spinner while the commands are being executed.

    while kill -0 "$PID" &>/dev/null; do

        frameText="   [${FRAMES:i++%NUMBER_OR_FRAMES:1}] $MSG"
        # Print frame text.
        printf "%s" "$frameText"
        sleep 0.2

        # Clear frame text.
        printf "\r"

    done

}

set_trap() {
    trap -p "$1" | grep "$2" &> /dev/null \
        || trap '$2' "$1"

}

execute() {

    local -r CMDS="$1"
    local -r MSG="${2:-$1}"
    local -r TMP_FILE="$(mktemp /tmp/XXXXX)"

    local exitCode=0
    local cmdsPID=""

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # If the current process is ended,
    # also end all its subprocesses.

    set_trap "EXIT" "kill_all_subprocesses"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Execute commands in background

    eval "$CMDS" \
        &> /dev/null \
        2> "$TMP_FILE" &

    cmdsPID=$!

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Show a spinner if the commands
    # require more time to complete.

    show_spinner "$cmdsPID" "$CMDS" "$MSG"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Wait for the commands to no longer be executing
    # in the background, and then get their exit code.

    wait "$cmdsPID" &> /dev/null
    exitCode=$?

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Print output based on what happened.

    print_result $exitCode "$MSG"

    if [ $exitCode -ne 0 ]; then
        print_error_stream < "$TMP_FILE"
    fi

    rm -rf "$TMP_FILE"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    return $exitCode

}

print_error_stream() {
    while read -r line; do
        print_error "↳ ERROR: $line"
    done
}


# ----------------------------------------------------------------------
# | Main Functions                                                   |
# ----------------------------------------------------------------------

configure_terminal() {
    # base16
    git clone https://github.com/chriskempson/base16-shell.git ~/.config/base16-shell
    mkdir -p ~/.config/nvim

    ln -s "$dotfilesRepoDirectory/nvim/init.vim" ~/.config/nvim/
    ln -s "$dotfilesRepoDirectory/bash/bashrc" $HOME/.bashrc
    ln -s "$dotfilesRepoDirectory/bash/bash_aliases" $HOME/.bash_aliases
    ln -s "$dotfilesRepoDirectory/bash/bash_prompt" $HOME/.bash_prompt
    ln -s "$dotfilesRepoDirectory/git/gitconfig" $HOME/.gitconfig
    echo "source ~/.bashrc" > $HOME/.bash_profile
    print_result $? 'Copying profile files'
}

clone_dotfiles() {
    print_info "Cloning dotfiles.."

    if [ -d "$dotfilesRepoDirectory" ]; then
       print_info "Dotfiles folder already exists.. skipping"
       return
    fi

	# Cloning dotfiles on directory
    print_info "Cloning dotfiles on $dotfilesRepoDirectory"
    git clone --recursive "$DOTFILES_ORIGIN" "$dotfilesRepoDirectory"
    print_result $? 'Clone dotfiles' 'true'
    printf '\n'

    cd "$dotfilesRepoDirectory"
    print_info "Installing powerline fonts"
    sh fonts/install.sh
}

configure_python() {
    print_info "Configuring python environment.."

    curl https://pyenv.run | bash

    eval "$(pyenv init -)"

    # install pyenv-virtualenv
    git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv


    # installing python versions
    pyenv install 3.7.0
    pyenv install 2.7.15

    # creating global virtualenvs
    pyenv virtualenv 3.7.0 3
    pyenv virtualenv 2.7.15 2

    # installing python specific tools on global virtualenvs
    pyenv activate 3
    pip install neovim howdoi httpie ipython flake8 youtube-dl
    pyenv deactivate
    pyenv activate 2
    pip install flake8 neovim
    pyenv deactivate

    pyenv global 3.7.0 3 2.7.15 2

    # install pyenv-virtualenvwrapper
    git clone https://github.com/pyenv/pyenv-virtualenvwrapper.git $(pyenv root)/plugins/pyenv-virtualenvwrapper

}


configure_node() {
    # install nvm
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
    nvm install 8.16.0
}

apt_install() {
    declare -r PACKAGE="$1"
    declare -r PACKAGE_READABLE_NAME="$2"

    if ! package_is_installed "$PACKAGE"; then
        execute "sudo apt-get install --allow-unauthenticated -qqy $PACKAGE" "$PACKAGE_READABLE_NAME"
    else
        print_success "$PACKAGE_READABLE_NAME"
    fi

}

package_is_installed() {
    dpkg -s "$1" &> /dev/null
}

update() {
    # Resynchronize the package index files from their sources.
    execute \
        "sudo apt-get update -qqy" \
        "APT (update)"

}

install_apps() {
    print_info "Installing APT apps"
    update

    apt_install hub "Github Hub"
    apt_install speedtest-cli "Speedtest CLI"
    apt_install neovim "NeoVim"
    apt_install ripgrep "ripgrep"
    apt_install httpie "HTTPie"
    apt_install pass "pass"
    apt_install bat "bat"
    apt_install fd "fd"
    apt_install google-chrome-stable "Chrome"
    apt_install firefox "Firefox"
    apt_install qbittorrent "QBitTorrent"
    apt_install vlc "VLC"
}

# ----------------------------------------------------------------------
# | Main                                                               |
# ----------------------------------------------------------------------

main() {

    # Ensure the OS is supported and
    # it's above the required version

    verify_os || exit 1

    cd "$(dirname "$BASH_SOURCE")"

    ask_for_sudo

    clone_dotfiles

    print_info 'Installing applications'

    install_apps

    configure_terminal

    configure_python

    configure_node

    print_in_green "Success! Please restart the terminal to see the changes!"
}

main
