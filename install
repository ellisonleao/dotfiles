#!/bin/bash

declare -r GITHUB_REPOSITORY='ellisonleao/dotfiles'
declare -r DOTFILES_ORIGIN="https://github.com/$GITHUB_REPOSITORY.git"
declare dotfilesDirectory=$HOME
declare dotfilesRepoDirectory="$dotfilesDirectory/.dotfiles"

# ----------------------------------------------------------------------
# | Helper Functions                                                   |
# ----------------------------------------------------------------------
print_error() {
    print_in_red "  [✖] $1 $2 \\n"
}

print_in_green() {
    printf "\\e[0;32m%s\\e[0m" "$1"
}

print_in_purple() {
    printf "\\e[0;35m%s\\e[0m" "$1"
}

print_in_red() {
    printf "\\e[0;31m%s\\e[0m" "$1"
}

print_info() {
    print_in_purple "\\n $1\\n\\n"
}

print_result() {
    if [ "$1" -eq 0 ]; then
        print_success "$2"
    else
        print_error "$2"
    fi

    return "$1"
}

print_success() {
    print_in_green "  [✔] $1\\n"
}

ask_for_sudo() {

    # Ask for the administrator password upfront
    sudo -v &> /dev/null

    # Update existing `sudo` time stamp until this script has finished
    # https://gist.github.com/cowboy/3118588
    while true; do
        sudo -n true
        sleep 60
        kill -0 "$$" || exit
    done &> /dev/null &

}

cmd_exists() {
    command -v "$1" &> /dev/null
    return $?
}

verify_os() {
    declare -r OS_NAME
    OS_NAME="$(uname -s)"

    if [ ! "$OS_NAME" == "Linux" ]; then
        printf 'Sorry, this script is intended only for Ubuntu based distros!'
    fi

    return 1
}


show_spinner() {

    local -r FRAMES='/-\|'

    # shellcheck disable=SC2034
    local -r NUMBER_OR_FRAMES=${#FRAMES}

    local -r CMDS="$2"
    local -r MSG="$3"
    local -r PID="$1"

    local i=0
    local frameText=""

    # Display spinner while the commands are being executed.

    while kill -0 "$PID" &>/dev/null; do

        frameText="   [${FRAMES:i++%NUMBER_OR_FRAMES:1}] $MSG"
        # Print frame text.
        printf "%s" "$frameText"
        sleep 0.2

        # Clear frame text.
        printf "\\r"

    done

}

set_trap() {
    trap -p "$1" | grep "$2" &> /dev/null \
        || trap '$2' "$1"

    }

execute() {

    local -r CMDS="$1"
    local -r MSG="${2:-$1}"
    local -r TMP_FILE="$(mktemp /tmp/XXXXX)"

    local exitCode=0
    local cmdsPID=""

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # If the current process is ended,
    # also end all its subprocesses.

    set_trap "EXIT" "kill_all_subprocesses"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Execute commands in background

    eval "$CMDS" \
        &> /dev/null \
        2> "$TMP_FILE" &

    cmdsPID=$!

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Show a spinner if the commands
    # require more time to complete.

    show_spinner "$cmdsPID" "$CMDS" "$MSG"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Wait for the commands to no longer be executing
    # in the background, and then get their exit code.

    wait "$cmdsPID" &> /dev/null
    exitCode=$?

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Print output based on what happened.

    print_result $exitCode "$MSG"

    if [ $exitCode -ne 0 ]; then
        print_error_stream < "$TMP_FILE"
    fi

    rm -rf "$TMP_FILE"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    return $exitCode

}

print_error_stream() {
    while read -r line; do
        print_error "↳ ERROR: $line"
    done
}


# ----------------------------------------------------------------------
# | Main Functions                                                   |
# ----------------------------------------------------------------------

configure_terminal() {
    execute "mkdir -p ~/.config/nvim" "Creating .config folder"
    # base16
    execute "git clone https://github.com/chriskempson/base16-shell.git ~/.config/base16-shell" \
        "Cloning base-16"

    print_info "Creating symlinks for nvim and bash"
    execute "ln -s \"$dotfilesRepoDirectory/nvim/init.vim\" ~/.config/nvim/" "Creating init.vim symlink"
    execute "ln -s \"$dotfilesRepoDirectory/bash/bashrc\"  \"$HOME/.bashrc\"" "Creating .bashrc symlink"
    execute "ln -s \"$dotfilesRepoDirectory/bash/bash_profile\"  \"$HOME/.bash_profile\"" "Creating .bash_profile symlink"
    execute "ln -s \"$dotfilesRepoDirectory/bash/bash_aliases\"  \"$HOME/.bash_aliases\"" "Creating .bash_aliases symlink"
    execute "ln -s \"$dotfilesRepoDirectory/bash/bash_prompt\"  \"$HOME/.bash_prompt\"" "Creating .bash_prompt symlink"
    execute "ln -s \"$dotfilesRepoDirectory/git/gitconfig\"  \"$HOME/.gitconfig\"" "Creating .gitconfig symlink"
    print_result $? "Terminal configuration"
}

clone_dotfiles() {
    if [ -d "$dotfilesRepoDirectory" ]; then
        print_info "Dotfiles folder already exists.. skipping"
        return
    fi
    # Cloning dotfiles on directory
    execute "git clone \"$DOTFILES_ORIGIN\" \"$dotfilesRepoDirectory\"" "Cloning dotfiles on $dotfilesRepoDirectory"
}

configure_python() {
    print_info "Configuring python environment.."

    execute "curl https://pyenv.run | bash" "Installing pyenv"

    execute \"eval "$(pyenv init -)"\" "pyenv init"

    execute "git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv"\
        "Installing pyenv-virtualenv"

    execute "pyenv install 3.7.0" "Installing Python 3.7.0"
    execute "pyenv install 2.7.15" "Installing Python 2.7.15"

    execute "pyenv virtualenv 3.7.0 3" "Creating global python 3 virtualenv"
    execute "pyenv virtualenv 2.7.15 2" "Creating global python 2 virtualenv"

    # installing python specific tools on global virtualenvs
    pyenv activate 3
    execute "pip install neovim howdoi httpie ipython flake8 youtube-dl" "Installing python 3 packages"
    pyenv deactivate
    pyenv activate 2
    execute "pip install flake8 neovim" "Installing python 2 packages"
    pyenv deactivate

    execute "pyenv global 3.7.0 3 2.7.15 2" \
        "Set python versions global order"

    execute "git clone https://github.com/pyenv/pyenv-virtualenvwrapper.git $(pyenv root)/plugins/pyenv-virtualenvwrapper"\
        "Install pyenv-virtualenvwrapper"
    }


configure_node() {
    execute "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash" "Installing NVM"
    execute "nvm install 8.16.0" "Installing node 8.16"
}

install() {
    declare -r PACKAGE="$1"
    declare -r PACKAGE_READABLE_NAME="$2"
    declare -r SERVICE="${3:apt}"

    local COMMAND=""

    if [ "${3}" == "apt" ];then
        COMMAND="apt-get install --allow-unauthenticated -qqy"
    else
        COMMAND="snap install"
    fi

    if ! package_is_installed "$PACKAGE" "$SERVICE"; then
        execute "sudo $COMMAND $PACKAGE" "$PACKAGE_READABLE_NAME"
    else
        print_success "$PACKAGE_READABLE_NAME"
    fi
}

install_docker() {
    execute "curl -fsSL https://get.docker.com -o /tmp/get-docker.sh && sudo sh /tmp/get-docker.sh" "Installing Docker-CE"
    execute "sudo usermod -aG docker ellison" "Adding user to docker group for non-root execution"

    # TODO: add docker-compose install
}

package_is_installed() {
    declare -r SERVICE="$2"
    if [ "${2}" == "apt" ]; then
        dpkg -s "$1" &> /dev/null
    else
        snap list | grep "$1" &> /dev/null
    fi
}

install_apps() {
    print_info "Installing APT/Snap apps"
    execute "sudo apt-get update -qqy" "APT (update)"

    install snapd "Snapd"
    install hub "Github Hub"
    install speedtest-cli "Speedtest CLI"
    install neovim "NeoVim"
    install ripgrep "ripgrep"
    install httpie "HTTPie"
    install pass "pass"
    install bat "bat"
    install fd "fd"
    install google-chrome-stable "Chrome"
    install firefox "Firefox"
    install tor "TOR"
    install qbittorrent "QBitTorrent"
    install vlc "VLC"
    install terminator "Terminator"
    install gnome-tweaks "GNOME Tweakspt"
    install  "GNOME Tweaks"
    install fonts-powerline "Powerline Fonts"
    install fonts-firacode "FiraCode font"

    install spotify "Spotify" "snap"

    install_docker
}

# ----------------------------------------------------------------------
# | Main                                                               |
# ----------------------------------------------------------------------

main() {

    # Ensure the OS is supported and
    # it's above the required version

    verify_os || exit 1

    cd "$(dirname "${BASH_SOURCE[0]}")" || exit

    ask_for_sudo

    clone_dotfiles

    print_info 'Installing applications'

    install_apps

    configure_terminal

    configure_python

    configure_node

    print_in_green "Success! Please restart the terminal to see the changes!"
}

main
